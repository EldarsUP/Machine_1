{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/Letch49/ML-vvsu-2025/blob/feature/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0_1.ipynb","timestamp":1727475649543}],"collapsed_sections":["tm8i1hZ4A5lu","eiFQUgHECLP_","YmWlNDdjDh7G","B1bbdRrWD7iZ"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# МЛ Практика 1\n","## Обзор занятий: Чем предстоит заниматься\n","Цели сессии:\n","\n","1. Ознакомление с основными понятиями машинного обучения и структурой практических занятий.\n","2. Представление доступных наборов данных для последующих упражнений.\n","3. Формирование списка участников и распределение ролей (при необходимости).\n","4. Практическое освоение методов описательного анализа данных.\n","5. Понимание типов данных и их важности в контексте машинного обучения.\n","План занятий:\n","\n","1. Введение и обзор целей курса.\n","2. Представление наборов данных.\n","3. Формирование списка студентов.\n","4. Совместный разбор выбранного набора данных с обсуждением вопросов.\n","5. Задача 1: Описание набора данных и определение типов данных.\n","6. Пример статистического разбора на основе wine.csv.\n","7. Обсуждение типов переменных и их определения по статистике.\n","8. Вопросы и ответы, обсуждение домашних заданий."],"metadata":{"id":"tcYorCKH80fp"}},{"cell_type":"markdown","source":["# Наборы данных по вариантам\n","\n","https://disk.yandex.ru/i/nY93FrjzthRO2Q"],"metadata":{"id":"rudyRMMW-U2i"}},{"cell_type":"markdown","source":["[github](https://github.com/Letch49/ML-vvsu-2025)"],"metadata":{"id":"NdlLoSu8EhPc"}},{"cell_type":"markdown","source":[],"metadata":{"id":"sHEOFvmzH6nn"}},{"cell_type":"markdown","source":["# Наборы данных по вариантам\n","\n","| №  | Название файла      | Уровень сложности (1-5) | Обоснование                                                                                         | Ссылка                                                              |\n","|----|---------------------|-------------------------|-----------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|\n","| 1  | wine.csv            | 1                       | Базовый набор данных из scikit-learn с небольшим количеством признаков и простой структурой.          | [wine.csv](https://disk.yandex.ru/d/OELXhKkfsWTJuw)                 |\n","| 2  | diamond.csv         | 2                       | Набор данных со средним количеством признаков (например, караты, цвет, огранка) и четкими целями.     | [diamond.csv](https://disk.yandex.ru/d/7u9rI1RqWPQD7Q)              |\n","| 3  | employee.csv        | 2                       | Типичные данные о сотрудниках с сочетанием числовых и категориальных признаков.                      | [employee.csv](https://disk.yandex.ru/d/b9kxHcJ8vviXWg)             |\n","| 4  | heart.csv           | 2                       | Стандартный медицинский набор данных для задач классификации, хорошо изучен и документирован.         | [heart.csv](https://disk.yandex.ru/d/QNT6pUh6G3Eeqw)                |\n","| 5  | heart_disease.csv   | 3                       | Более специализированный медицинский набор данных, возможно с большим количеством признаков.          | [heart_disease.csv](https://disk.yandex.ru/d/jHLFkdLICQIilQ)        |\n","| 6  | hepatitis.csv       | 3                       | Медицинский набор данных с потенциально сложными признаками и необходимостью продвинутой обработки.   | [hepatitis.csv](https://disk.yandex.ru/d/0fuKz_gWwMJGqg)            |\n","| 7  | income.csv          | 3                       | Набор данных для прогнозирования дохода, может содержать разнообразные и сложные признаки.            | [income.csv](https://disk.yandex.ru/d/pjFb9JhG7AZ3Jg)               |\n","| 8  | insurance.csv       | 3                       | Страховые данные с множеством признаков, включая категориальные и числовые, возможны сложности в обработке. | [insurance.csv](https://disk.yandex.ru/d/WNdgMUGvgsPKgA)           |\n","| 9  | france.csv          | 3                       | Данные, связанные с Францией, вероятно, экономические или демографические, требующие комплексного анализа. | [france.csv](https://disk.yandex.ru/d/ts48WLo7TazEvg)             |\n","| 10 | germany.csv         | 3                       | Аналогично france.csv, данные о Германии могут быть комплексными и многогранными.                     | [germany.csv](https://disk.yandex.ru/d/UDxaNz46HwcFsw)              |\n","| 11 | jucy.csv            | 3                       | Предполагается, что это специализированный или менее известный набор данных, возможны неопределенности в структуре и сложности. |  [jucy.csv](https://disk.yandex.ru/d/omBOncVnzElRoA)                                                                 |\n"],"metadata":{"id":"Cg4B0bp8_BNQ"}},{"cell_type":"markdown","source":["**p.s. wine датасет не берем**, это будет читерство, такого не одобряем"],"metadata":{"id":"CYwJ2QAPEzpq"}},{"cell_type":"markdown","source":["## Описание:\n","В этом разделе вы загрузите набор данных wine.csv, ознакомитесь с его структурой и проведёте первичный обзор."],"metadata":{"id":"Eho9OVlR_mar"}},{"cell_type":"code","source":["# импортируем библиотеки\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"cAklc2-4_hag","executionInfo":{"status":"ok","timestamp":1727473288433,"user_tz":-600,"elapsed":4529,"user":{"displayName":"","userId":""}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["```p.s. а если либы нет, делаем (ошибка импорта например) ```"],"metadata":{"id":"nB8lKsq8FTCt"}},{"cell_type":"code","source":["!pip install seaborn # или название другой либы, загуглите how to install packages using pip"],"metadata":{"id":"iuqbi9WXFZ7A","executionInfo":{"status":"ok","timestamp":1727449767152,"user_tz":-600,"elapsed":4414,"user":{"displayName":"","userId":""}},"outputId":"0ee17583-f749-4a3a-92c0-901f0cf196d3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n","Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.26.4)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.1.4)\n","Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (10.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.4)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.2)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n"]}]},{"cell_type":"markdown","source":["Описание:\n","В этом разделе вы загрузите набор данных wine.csv, ознакомитесь с его структурой и проведёте первичный обзор."],"metadata":{"id":"gkrZd1Sf_j-4"}},{"cell_type":"code","source":["PATH_TO_FILE: str = '/content/insurance.csv' # Загрузка набора данных\n","## p.s. в левой панеле нажать на папку и перетащить туда файл,\n","## а wince.csv заменить на свой вариант (ПКМ -> копировать путь)\n","\n","df = pd.read_csv(PATH_TO_FILE) # функция превращение данных из CSV в DataFrame"],"metadata":{"id":"_AxEco9xAAvN","executionInfo":{"status":"ok","timestamp":1727473296241,"user_tz":-600,"elapsed":489,"user":{"displayName":"","userId":""}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Вывод первых 5 строк\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"BY0SAfx6AWXB","outputId":"8f93153d-799b-4c85-b0f6-763eede5de0e","executionInfo":{"status":"ok","timestamp":1727473298713,"user_tz":-600,"elapsed":439,"user":{"displayName":"","userId":""}}},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-bccee144-a490-4a33-a1b9-7fd29aa383f7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bccee144-a490-4a33-a1b9-7fd29aa383f7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bccee144-a490-4a33-a1b9-7fd29aa383f7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bccee144-a490-4a33-a1b9-7fd29aa383f7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-22437d97-e13c-4313-b314-bf2d845c0fc3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22437d97-e13c-4313-b314-bf2d845c0fc3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-22437d97-e13c-4313-b314-bf2d845c0fc3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098186911679014,\n        \"min\": 15.96,\n        \"max\": 53.13,\n        \"num_unique_values\": 548,\n        \"samples\": [\n          23.18,\n          26.885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011236694001,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.85885,\n          5708.866999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":[],"metadata":{"id":"08E8yFAcFkgQ"}},{"cell_type":"code","source":["# Информация о наборе данных\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FXF-l0y1AXNU","outputId":"632ad3dd-b96f-47e9-cac5-a52c8a7d1cd1","executionInfo":{"status":"ok","timestamp":1727473302716,"user_tz":-600,"elapsed":474,"user":{"displayName":"","userId":""}}},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1338 entries, 0 to 1337\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       1338 non-null   int64  \n"," 1   sex       1338 non-null   object \n"," 2   bmi       1338 non-null   float64\n"," 3   children  1338 non-null   int64  \n"," 4   smoker    1338 non-null   object \n"," 5   region    1338 non-null   object \n"," 6   charges   1338 non-null   float64\n","dtypes: float64(2), int64(2), object(3)\n","memory usage: 73.3+ KB\n"]}]},{"cell_type":"code","source":["# Статистический разбор\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"1eP4wqv1_tqN","outputId":"1d1fe460-59fa-4477-f371-5108930cd262","executionInfo":{"status":"ok","timestamp":1727473306306,"user_tz":-600,"elapsed":497,"user":{"displayName":"","userId":""}}},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               age          bmi     children       charges\n","count  1338.000000  1338.000000  1338.000000   1338.000000\n","mean     39.207025    30.663397     1.094918  13270.422265\n","std      14.049960     6.098187     1.205493  12110.011237\n","min      18.000000    15.960000     0.000000   1121.873900\n","25%      27.000000    26.296250     0.000000   4740.287150\n","50%      39.000000    30.400000     1.000000   9382.033000\n","75%      51.000000    34.693750     2.000000  16639.912515\n","max      64.000000    53.130000     5.000000  63770.428010"],"text/html":["\n","  <div id=\"df-6c8a3977-fe69-4ed5-aa5e-cb4bf439ecfc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>39.207025</td>\n","      <td>30.663397</td>\n","      <td>1.094918</td>\n","      <td>13270.422265</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>14.049960</td>\n","      <td>6.098187</td>\n","      <td>1.205493</td>\n","      <td>12110.011237</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>18.000000</td>\n","      <td>15.960000</td>\n","      <td>0.000000</td>\n","      <td>1121.873900</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>27.000000</td>\n","      <td>26.296250</td>\n","      <td>0.000000</td>\n","      <td>4740.287150</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>39.000000</td>\n","      <td>30.400000</td>\n","      <td>1.000000</td>\n","      <td>9382.033000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>51.000000</td>\n","      <td>34.693750</td>\n","      <td>2.000000</td>\n","      <td>16639.912515</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>64.000000</td>\n","      <td>53.130000</td>\n","      <td>5.000000</td>\n","      <td>63770.428010</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c8a3977-fe69-4ed5-aa5e-cb4bf439ecfc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c8a3977-fe69-4ed5-aa5e-cb4bf439ecfc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c8a3977-fe69-4ed5-aa5e-cb4bf439ecfc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c8906927-c2e0-4cc6-b539-c186a8b90ec6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8906927-c2e0-4cc6-b539-c186a8b90ec6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c8906927-c2e0-4cc6-b539-c186a8b90ec6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 460.6106090399993,\n        \"min\": 14.049960379216154,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          39.20702541106129,\n          39.0,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 463.29524977918294,\n        \"min\": 6.098186911679014,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30.66339686098655,\n          30.4,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 472.5368318870757,\n        \"min\": 0.0,\n        \"max\": 1338.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1338.0,\n          1.0949177877429,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20381.922846226596,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13270.422265141257,\n          9382.033,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Вывод колонок в наборе данных\n","df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"157IXtxKAjbv","outputId":"9a8ee879-7028-4b2f-a0f4-eb54d83e85da","executionInfo":{"status":"ok","timestamp":1727473321873,"user_tz":-600,"elapsed":503,"user":{"displayName":"","userId":""}}},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# вывод датафрейма\n","df # p.s. обычно переменную с набором данных называют df, придерживайтесь этого наименования в дальнейшем"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"rnL3akt2Ao81","outputId":"a1481395-1385-4486-8f1c-11d4493ec082","executionInfo":{"status":"ok","timestamp":1727473323696,"user_tz":-600,"elapsed":6,"user":{"displayName":"","userId":""}}},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      age     sex     bmi  children smoker     region      charges\n","0      19  female  27.900         0    yes  southwest  16884.92400\n","1      18    male  33.770         1     no  southeast   1725.55230\n","2      28    male  33.000         3     no  southeast   4449.46200\n","3      33    male  22.705         0     no  northwest  21984.47061\n","4      32    male  28.880         0     no  northwest   3866.85520\n","...   ...     ...     ...       ...    ...        ...          ...\n","1333   50    male  30.970         3     no  northwest  10600.54830\n","1334   18  female  31.920         0     no  northeast   2205.98080\n","1335   18  female  36.850         0     no  southeast   1629.83350\n","1336   21  female  25.800         0     no  southwest   2007.94500\n","1337   61  female  29.070         0    yes  northwest  29141.36030\n","\n","[1338 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-99a25560-1ce1-48f5-ba74-03e5c38f882c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1333</th>\n","      <td>50</td>\n","      <td>male</td>\n","      <td>30.970</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>10600.54830</td>\n","    </tr>\n","    <tr>\n","      <th>1334</th>\n","      <td>18</td>\n","      <td>female</td>\n","      <td>31.920</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northeast</td>\n","      <td>2205.98080</td>\n","    </tr>\n","    <tr>\n","      <th>1335</th>\n","      <td>18</td>\n","      <td>female</td>\n","      <td>36.850</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1629.83350</td>\n","    </tr>\n","    <tr>\n","      <th>1336</th>\n","      <td>21</td>\n","      <td>female</td>\n","      <td>25.800</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>southwest</td>\n","      <td>2007.94500</td>\n","    </tr>\n","    <tr>\n","      <th>1337</th>\n","      <td>61</td>\n","      <td>female</td>\n","      <td>29.070</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>northwest</td>\n","      <td>29141.36030</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1338 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99a25560-1ce1-48f5-ba74-03e5c38f882c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-99a25560-1ce1-48f5-ba74-03e5c38f882c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-99a25560-1ce1-48f5-ba74-03e5c38f882c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-52e562a6-86f4-4f05-b4df-a7295ffdf703\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52e562a6-86f4-4f05-b4df-a7295ffdf703')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-52e562a6-86f4-4f05-b4df-a7295ffdf703 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098186911679014,\n        \"min\": 15.96,\n        \"max\": 53.13,\n        \"num_unique_values\": 548,\n        \"samples\": [\n          23.18,\n          26.885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011236694001,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.85885,\n          5708.866999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["## Определение типов переменных"],"metadata":{"id":"tm8i1hZ4A5lu"}},{"cell_type":"markdown","source":[],"metadata":{"id":"0XVXA7LmA7fM"}},{"cell_type":"code","source":["# Список столбцов и их типов данных\n","print(df.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OOIfnW3OAbZ-","outputId":"0c08fd41-cb59-4817-88f4-7c6d7ce88f91","executionInfo":{"status":"ok","timestamp":1727473336045,"user_tz":-600,"elapsed":468,"user":{"displayName":"","userId":""}}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["age           int64\n","sex          object\n","bmi         float64\n","children      int64\n","smoker       object\n","region       object\n","charges     float64\n","dtype: object\n"]}]},{"cell_type":"markdown","source":["- Числовые переменные обычно имеют тип int64 или float64.\n","- Категориальные переменные могут иметь тип object или category, но иногда целочисленные переменные также могут быть категориальными (например, метки классов)."],"metadata":{"id":"D6K8rKQkBBTx"}},{"cell_type":"markdown","source":["**Почему целые числа могут быть категориальными**?"],"metadata":{"id":"6ePNxVMIBNAX"}},{"cell_type":"markdown","source":["\n","   ### Объяснение:\n","   ```\n","   Целочисленные переменные, такие как `Class`, могут представлять категории\n","   (например, тип вина) вместо количественных значений.\n","   В таких случаях они используются как метки классов, а не как числовые данные.\n","   ```"],"metadata":{"id":"pud5HW85BK4u"}},{"cell_type":"markdown","source":["## Статистический разбор данных"],"metadata":{"id":"eiFQUgHECLP_"}},{"cell_type":"markdown","source":["2. **Определите, какие переменные являются непрерывными, а какие дискретными:**\n","\n","   - **Непрерывные переменные:** могут принимать любое значение в диапазоне.\n","   - **Дискретные переменные:** принимают только определенные значения (обычно целые числа).\n","\n","   **Ваши ответы:**\n","\n","   - **Непрерывные переменные:**\n","     - age, bmi , children, charges, тк все числовые и у каждого могут быть разные значения в диапазоне\n","   \n","   - **Дискретные переменные:**\n","     - sex, smoker , region - тк они типа object"],"metadata":{"id":"WF5o933BCNUt"}},{"cell_type":"markdown","source":["1. **Посчитайте количество уникальных значений для каждой переменной:**"],"metadata":{"id":"MbYwHh_gCseY"}},{"cell_type":"code","source":["# Количество уникальных значений\n","for column in df.columns:\n","    print(f'{column}: {df[column].nunique()} уникальных значений')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U7YqAEKUBmhf","outputId":"ca1f98a1-5453-4c6e-e4e2-22d815b6282f","executionInfo":{"status":"ok","timestamp":1727473615085,"user_tz":-600,"elapsed":467,"user":{"displayName":"","userId":""}}},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["age: 47 уникальных значений\n","sex: 2 уникальных значений\n","bmi: 548 уникальных значений\n","children: 6 уникальных значений\n","smoker: 2 уникальных значений\n","region: 4 уникальных значений\n","charges: 1337 уникальных значений\n"]}]},{"cell_type":"markdown","source":["2. **Определите, какие переменные являются непрерывными, а какие дискретными:**\n","\n","   - **Непрерывные переменные:** могут принимать любое значение в диапазоне.\n","   - **Дискретные переменные:** принимают только определенные значения (обычно целые числа).\n","\n","   **Ваши ответы:**\n","\n","  **Непрерывные переменные:**\n","     - age, bmi ,  charges много значений, однозначно числовые, children тоже числовое , хотя и уникальных значений всего 6 , но это ожидаемо, так как больше 5-6 детей есть только у едениц всех людей, но категорально по количеству детей поделить нельзя\n","   \n","   - **Дискретные переменные:**\n","     - sex, smoker , region - тк у них очень мало уникальных значений"],"metadata":{"id":"qxTEAKDYCvkX"}},{"cell_type":"markdown","source":["3. **Посмотрите на статистические показатели и сделайте выводы о распределении переменных:**"],"metadata":{"id":"UyZC2Uc1C0Zf"}},{"cell_type":"code","source":["   # Статистический разбор\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"KavTuUGxC28e","outputId":"47905bd4-ffea-43c4-835f-b9eff2dc2159","executionInfo":{"status":"ok","timestamp":1727473667334,"user_tz":-600,"elapsed":489,"user":{"displayName":"","userId":""}}},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               age          bmi     children       charges\n","count  1338.000000  1338.000000  1338.000000   1338.000000\n","mean     39.207025    30.663397     1.094918  13270.422265\n","std      14.049960     6.098187     1.205493  12110.011237\n","min      18.000000    15.960000     0.000000   1121.873900\n","25%      27.000000    26.296250     0.000000   4740.287150\n","50%      39.000000    30.400000     1.000000   9382.033000\n","75%      51.000000    34.693750     2.000000  16639.912515\n","max      64.000000    53.130000     5.000000  63770.428010"],"text/html":["\n","  <div id=\"df-ff857339-3c80-4efc-8951-1e9d1a00c3ee\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","      <td>1338.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>39.207025</td>\n","      <td>30.663397</td>\n","      <td>1.094918</td>\n","      <td>13270.422265</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>14.049960</td>\n","      <td>6.098187</td>\n","      <td>1.205493</td>\n","      <td>12110.011237</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>18.000000</td>\n","      <td>15.960000</td>\n","      <td>0.000000</td>\n","      <td>1121.873900</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>27.000000</td>\n","      <td>26.296250</td>\n","      <td>0.000000</td>\n","      <td>4740.287150</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>39.000000</td>\n","      <td>30.400000</td>\n","      <td>1.000000</td>\n","      <td>9382.033000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>51.000000</td>\n","      <td>34.693750</td>\n","      <td>2.000000</td>\n","      <td>16639.912515</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>64.000000</td>\n","      <td>53.130000</td>\n","      <td>5.000000</td>\n","      <td>63770.428010</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff857339-3c80-4efc-8951-1e9d1a00c3ee')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ff857339-3c80-4efc-8951-1e9d1a00c3ee button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ff857339-3c80-4efc-8951-1e9d1a00c3ee');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cf8085ef-729f-4ebf-9c31-bbc64608f918\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf8085ef-729f-4ebf-9c31-bbc64608f918')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cf8085ef-729f-4ebf-9c31-bbc64608f918 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 460.6106090399993,\n        \"min\": 14.049960379216154,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          39.20702541106129,\n          39.0,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 463.29524977918294,\n        \"min\": 6.098186911679014,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30.66339686098655,\n          30.4,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 472.5368318870757,\n        \"min\": 0.0,\n        \"max\": 1338.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1338.0,\n          1.0949177877429,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20381.922846226596,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13270.422265141257,\n          9382.033,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["   **Ваши наблюдения:**\n","   \n","  Про переменную age можно сказать, что страховка пользуется популярностью у более старших людей, тк более 75% имеют возраст 27+ лет, также можно увидеть, что либо после 51 людям в большинстве все равно на страховку, либо компании таким отказывают во избежании убытков.\n","  Про переменную bmi можно сказать, что так как с 25 до 29 это избыточный вес, то можно сделать вывод, что большинство страховщиков имеют проблеммы с ожирением >75%.\n","  Про переменную children можно сказать, что большинство страховщиков имеют хотябы одного ребенка.\n","  Про переменную charges можно сказать, что большиство людей имеет страховку от 5 до 17 тысяч, а значит это люди средне высокого класса"],"metadata":{"id":"pu48XMD9C5bo"}},{"cell_type":"markdown","source":["```# тут```"],"metadata":{"id":"tnN5_5ViFHk5"}},{"cell_type":"markdown","source":["## **4. Визуализация распределения переменных**\n","\n","### **Описание:**\n","Создайте визуализации для понимания распределения числовых и категориальных переменных.\n","\n","### **Шаги:**\n"],"metadata":{"id":"YmWlNDdjDh7G"}},{"cell_type":"markdown","source":[],"metadata":{"id":"shHlvlvFiOxC"}},{"cell_type":"markdown","source":["1. **Гистограмма для числовой переменной `children`:**"],"metadata":{"id":"7U-U04OFDlLr"}},{"cell_type":"code","source":["   sns.histplot(df['children'], kde=True)\n","   plt.title('Распределение children\t')\n","   plt.xlabel('children\t')\n","   plt.ylabel('Частота')\n","   plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":508},"id":"MyuMx_RlDl1y","outputId":"0aac95d7-48f2-4ddf-d1b9-45810e9d2c3e","executionInfo":{"status":"ok","timestamp":1727474126658,"user_tz":-600,"elapsed":504,"user":{"displayName":"","userId":""}}},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 9 (\t) missing from current font.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["2. **Столбчатая диаграмма для категориальной переменной `sex`:**"],"metadata":{"id":"xl44MN9qDnv9"}},{"cell_type":"code","source":["   sns.countplot(x='sex', data=df)\n","   plt.title('Распределение sex')\n","   plt.xlabel('sex')\n","   plt.ylabel('Количество')\n","   plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"S4PxrTMQDoyZ","outputId":"0d28acdc-5b91-4882-f651-428ac5fb353d","executionInfo":{"status":"ok","timestamp":1727475408293,"user_tz":-600,"elapsed":955,"user":{"displayName":"","userId":""}}},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Боксплот для числовой переменной `charges`:**"],"metadata":{"id":"A_u0EaAxDpdY"}},{"cell_type":"code","source":["   sns.boxplot(x=df['charges'])\n","   plt.title('Boxplot charges')\n","   plt.xlabel('charges')\n","   plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"Au59-9x8DsYS","outputId":"a59bb64b-bddb-4b78-aaa2-a85f6f80d430","executionInfo":{"status":"ok","timestamp":1727474215829,"user_tz":-600,"elapsed":483,"user":{"displayName":"","userId":""}}},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAggAAAHHCAYAAADaqqCfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAtNElEQVR4nO3deVhV5aLH8d9m2BtQAVNBMERwwKHA2WOlZlo4lNk5DY9Z2XBSU2/D8ZaVJp2ePJY2nAa16aZ1NL2lDXqcMjNJcygVUVEkxeFqimYCDqCy3/uHl33dvUwagsj38zw+ydrvXutdbwhf914LHcYYIwAAgHP4VPYEAADApYdAAAAAFgIBAABYCAQAAGAhEAAAgIVAAAAAFgIBAABYCAQAAGAhEAAAgIVAAKooh8Oh559/vrKnIUl6/vnn5XA4dPjw4cqeCoByQiAAvzNt2jQ5HA6vX2FhYerevbsWLlxY2dP7w9LS0vT8889r165dlT0VAJcwv8qeAHCpeuGFFxQTEyNjjA4ePKhp06apT58+mjdvnm6++ebKnt4FS0tL09///nddf/31atSoUWVPB8AlikAAitG7d2+1b9/e8/FDDz2k8PBwzZw5s0oHQlVljFFeXp4CAwMreypAtcBbDEAZhYaGKjAwUH5+3l19/PhxjRw5UlFRUXK5XIqLi9Mrr7yiwn8o9eTJk2revLmaN2+ukydPep535MgRRURE6JprrlFBQYEk6f7771fNmjW1c+dOJSYmqkaNGoqMjNQLL7ygsvzDqxs2bFDv3r0VHBysmjVrqkePHlq9erXn8WnTpumOO+6QJHXv3t3zFsp3331X4n63bdumO++8U/Xq1VNgYKDi4uI0evRoa9zRo0d1//33KzQ0VCEhIXrggQd04sQJrzFTp07VDTfcoLCwMLlcLrVs2VJTpkyx9tWoUSPdfPPNWrx4sdq3b6/AwEC9++67kqTdu3erX79+qlGjhsLCwvTEE09o8eLFRZ7LmjVr1KtXL4WEhCgoKEjdunXTypUrvcbk5ubq8ccfV6NGjeRyuRQWFqYbb7xR69evL3FdgMsZryAAxcjOztbhw4dljFFWVpbeeustHTt2TPfcc49njDFG/fr107Jly/TQQw+pdevWWrx4sZ588knt27dPr7/+ugIDA/XRRx/p2muv1ejRo/Xaa69JkoYPH67s7GxNmzZNvr6+nn0WFBSoV69e+tOf/qQJEyZo0aJFSkpK0pkzZ/TCCy8UO98tW7aoS5cuCg4O1lNPPSV/f3+9++67uv7667V8+XJ16tRJXbt21aOPPqo333xTzz77rFq0aCFJnv8WJTU1VV26dJG/v78GDx6sRo0aaceOHZo3b57GjRvnNfbOO+9UTEyMxo8fr/Xr1+uDDz5QWFiYXn75Zc+YKVOmqFWrVurXr5/8/Pw0b948DRs2TG63W8OHD/faX3p6ugYMGKAhQ4bo4YcfVlxcnI4fP64bbrhBv/zyix577DHVr19fn3zyiZYtW2bN/dtvv1Xv3r3Vrl07JSUlycfHxxMo33//vTp27ChJGjp0qGbPnq0RI0aoZcuW+vXXX7VixQpt3bpVbdu2LXZtgMuaAeBl6tSpRpL1y+VymWnTpnmN/fLLL40k8+KLL3ptv/32243D4TA///yzZ9szzzxjfHx8THJysvnss8+MJPPPf/7T63mDBg0yksx//Md/eLa53W7Tt29f43Q6zaFDhzzbJZmkpCTPx/379zdOp9Ps2LHDs23//v2mVq1apmvXrp5thcdetmxZmdaja9euplatWmb37t1e291ut+f3SUlJRpJ58MEHvcbcdtttpk6dOl7bTpw4YR0jMTHRxMbGem2Ljo42ksyiRYu8tr/66qtGkvnyyy89206ePGmaN2/udV5ut9s0bdrUJCYmes31xIkTJiYmxtx4442ebSEhIWb48OElLQNQ7fAWA1CMSZMmacmSJVqyZImmT5+u7t27669//as+//xzz5gFCxbI19dXjz76qNdzR44cKWOM110Pzz//vFq1aqVBgwZp2LBh6tatm/W8QiNGjPD83uFwaMSIETp16pS++eabIscXFBTo66+/Vv/+/RUbG+vZHhERobvvvlsrVqxQTk7Oea/BoUOHlJycrAcffFANGzb0eszhcFjjhw4d6vVxly5d9Ouvv3od+9xrCApfpenWrZt27typ7Oxsr+fHxMQoMTHRa9uiRYvUoEED9evXz7MtICBADz/8sNe4lJQUZWRk6O6779avv/6qw4cP6/Dhwzp+/Lh69Oih5ORkud1uSWffPlqzZo32799flmUBqgXeYgCK0bFjR6+LFAcMGKA2bdpoxIgRuvnmm+V0OrV7925FRkaqVq1aXs8tfMl+9+7dnm1Op1MffvihOnTooICAAE2dOrXIb7I+Pj5e3+QlqVmzZpJU7K2Jhw4d0okTJxQXF2c91qJFC7ndbu3du1etWrUq28n/n507d0qSrrrqqjKN/31E1K5dW5L022+/KTg4WJK0cuVKJSUladWqVdb1CdnZ2QoJCfF8HBMTYx1j9+7daty4sbV2TZo08fo4IyNDkjRo0KBi55udna3atWtrwoQJGjRokKKiotSuXTv16dNH9913n/X/AahOCASgjHx8fNS9e3e98cYbysjIOO9vtpK0ePFiSVJeXp4yMjKK/AZYlZ17LcW5zP9dYLljxw716NFDzZs312uvvaaoqCg5nU4tWLBAr7/+uudv9IX+yB0LhfuaOHGiWrduXeSYmjVrSjp77USXLl30xRdf6Ouvv9bEiRP18ssv6/PPP1fv3r0veA5AVUYgAOfhzJkzkqRjx45JkqKjo/XNN98oNzfX61WEbdu2eR4vlJqaqhdeeEEPPPCAUlJS9Ne//lWbNm3y+huzdPYb286dOz2vGkjS9u3bJanYn1tQr149BQUFKT093Xps27Zt8vHxUVRUlKSi3xooTuHfoDdv3lzm55Rk3rx5ys/P19y5c71ebSjqAsPiREdHKy0tTcYYr3P5+eefvcY1btxYkhQcHKyePXuWut+IiAgNGzZMw4YNU1ZWltq2batx48YRCKi2uAYBKKPTp0/r66+/ltPp9LyF0KdPHxUUFOjtt9/2Gvv666/L4XB4vrmcPn1a999/vyIjI/XGG29o2rRpOnjwoJ544okij3Xu/owxevvtt+Xv768ePXoUOd7X11c33XSTvvrqK6+3IQ4ePKhPPvlE1113necl/ho1akg6e0tiaerVq6euXbvqww8/1J49e7weM2W47bKoef7+udnZ2Zo6dWqZ95GYmKh9+/Zp7ty5nm15eXl6//33vca1a9dOjRs31iuvvOIJunMdOnRI0tnrN35/7UNYWJgiIyOVn59f5nkBlxteQQCKsXDhQs8rAVlZWfrkk0+UkZGhp59+2vPN9pZbblH37t01evRo7dq1SwkJCfr666/11Vdf6fHHH/f8LfbFF19USkqKli5dqlq1aik+Pl5jx47VmDFjdPvtt6tPnz6e4wYEBGjRokUaNGiQOnXqpIULF2r+/Pl69tlnVa9evWLn++KLL2rJkiW67rrrNGzYMPn5+endd99Vfn6+JkyY4BnXunVr+fr66uWXX1Z2drZcLpfn5xIU5c0339R1112ntm3bavDgwYqJidGuXbs0f/58paSknNea3nTTTXI6nbrllls0ZMgQHTt2TO+//77CwsL0yy+/lGkfQ4YM0dtvv60BAwboscceU0REhGbMmKGAgABJ//8KiY+Pjz744AP17t1brVq10gMPPKAGDRpo3759WrZsmYKDgzVv3jzl5ubqyiuv1O23366EhATVrFlT33zzjX788Ue9+uqr53V+wGWlMm+hAC5FRd3mGBAQYFq3bm2mTJnidcucMcbk5uaaJ554wkRGRhp/f3/TtGlTM3HiRM+4devWGT8/P69bF40x5syZM6ZDhw4mMjLS/Pbbb8aYs7c51qhRw+zYscPcdNNNJigoyISHh5ukpCRTUFDg9Xz97jZHY4xZv369SUxMNDVr1jRBQUGme/fu5ocffrDO8f333zexsbHG19e3TLc8bt682dx2220mNDTUBAQEmLi4OPPcc895Hi+8zfHc2zDPXcvMzEzPtrlz55r4+HgTEBBgGjVqZF5++WXz4YcfWuOio6NN3759i5zPzp07Td++fU1gYKCpV6+eGTlypJkzZ46RZFavXu01dsOGDebPf/6zqVOnjnG5XCY6OtrceeedZunSpcYYY/Lz882TTz5pEhISTK1atUyNGjVMQkKCmTx5colrAlzuHMZcwOuEAC6K+++/X7Nnzy7yJXGU7J///KeeeOIJ/c///I8aNGhQ2dMBqjyuQQBQ5Zz7I6uls9cgvPvuu2ratClxAJQTrkEAUOX8+c9/VsOGDdW6dWtlZ2dr+vTp2rZtm2bMmFHZUwMuGwQCgConMTFRH3zwgWbMmKGCggK1bNlSs2bN0l133VXZUwMuG1yDAAAALFyDAAAALAQCAACwXPA1CG63W/v371etWrXO60e3AgCAymOMUW5uriIjI+XjU/zrBBccCPv37/f8bHcAAFC17N27V1deeWWxj19wIBT+wzR79+71/NhZAABwacvJyVFUVJT1z9T/3gUHQuHbCsHBwQQCAABVTGmXB3CRIgAAsBAIAADAQiAAAAALgQAAACwEAgAAsBAIAADAQiAAAAALgQAAACwEAgAAsBAIAADAQiAAAAALgQAAACwEAgAAsBAIAADAQiAAAAALgQAAACwEAgAAsBAIAADAQiAAAAALgQAAACwEAgAAsBAIAADA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rl0v8moBuGCV/a9FASi7nJwc43K5zPvvv289lpmZaSSZDz74wLNty5YtRpLZunVrsfvs27evGTlypOfjbt26mTZt2niNGTVqlLnqqqu8to0ePdpIMr/99psxxpiHHnrIDB482GvM999/b3x8fMzJkyfNnDlzTHBwsMnJySnz+QKoPH6V3CcAzsPWrVuVn5+vHj16FDsmPj7e8/uIiAhJUlZWlpo3b66CggL94x//0Keffqp9+/bp1KlTys/PV1BQkNc+2rVr5/Vxenq6OnTo4LWtY8eOXh9v3LhRqampmjFjhmebMUZut1uZmZm68cYbFR0drdjYWPXq1Uu9evXSbbfdZh0bwKWBtxiAKiQwMLDUMf7+/p7fOxwOSWevW5CkiRMn6o033tCoUaO0bNkypaSkKDEx0boQsUaNGuc9t2PHjmnIkCFKSUnx/Nq4caMyMjLUuHFj1apVS+vXr9fMmTMVERGhsWPHKiEhwesaBgCXDgIBqEKaNm2qwMBALV269IKev3LlSt1666265557lJCQoNjYWG3fvr3U58XFxemnn37y2vbjjz96fdy2bVulpaWpSZMm1i+n0ylJ8vPzU8+ePTVhwgSlpqZq165d+vbbby/oXABcXAQCUIUEBARo1KhReuqpp/Txxx9rx44dWr16tf7rv/6rTM9v2rSplixZoh9++EFbt27VkCFDdPDgwVKfN2TIEG3btk2jRo3S9u3b9emnn2ratGmS/v9VilGjRumHH37QiBEjlJKSooyMDH311VeeixT//e9/680331RKSop2796tjz/+WG63W3FxcRe2GAAuKgIBqGKee+45jRw5UmPHjlWLFi101113KSsrq0zPHTNmjNq2bavExERdf/31ql+/vvr371/q82JiYjR79mx9/vnnio+P15QpUzx3MbhcLklnr31Yvny5tm/fri5duqhNmzYaO3asIiMjJUmhoaH6/PPPdcMNN6hFixZ65513NHPmTLVq1erCFgLAReUwxpjKngSAqmfcuHF65513tHfv3sqeCoCLgLsYAJTJ5MmT1aFDB9WpU0crV67UxIkTPW8fALj8EAgAyiQjI0Mvvviijhw5ooYNG2rkyJF65plnKntaAC4S3mIAAAAWLlIEAAAWAgEAAFgIBAAAYCEQAACAhUAAAAAWAgEAAFgIBAAAYCEQAACAhUAAAACW/wVAnDvi1a/4LgAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Гистограмма для категориальной переменной region:"],"metadata":{"id":"Opfll2OHibpY"}},{"cell_type":"code","source":[" sns.histplot(df['region'], kde=True)\n"," plt.title('Распределение region\t')\n"," plt.xlabel('region\t')\n"," plt.ylabel('Частота')\n"," plt.show()"],"metadata":{"id":"QoqMS9SjieX2","executionInfo":{"status":"ok","timestamp":1727475209196,"user_tz":-600,"elapsed":550,"user":{"displayName":"","userId":""}},"outputId":"f1213aab-5afd-45c2-865e-c03562ef42cd","colab":{"base_uri":"https://localhost:8080/","height":508}},"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 9 (\t) missing from current font.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Столбчатая диаграмма для категориальной переменной : smoker"],"metadata":{"id":"Qntg63cAjLpt"}},{"cell_type":"code","source":["sns.countplot(x='smoker', data=df)\n","plt.title('Распределение smoker')\n","plt.xlabel('smoker')\n","plt.ylabel('Количество')\n","plt.show()"],"metadata":{"id":"h4CPcT4AjNeT","executionInfo":{"status":"ok","timestamp":1727475468943,"user_tz":-600,"elapsed":499,"user":{"displayName":"","userId":""}},"outputId":"947526b1-ee18-4a8d-f2c6-1f23762d1a5c","colab":{"base_uri":"https://localhost:8080/","height":472}},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Столбчатая диаграмма для категориальной переменной smoker:"],"metadata":{"id":"0dHSjg7SjzU6"}},{"cell_type":"markdown","source":["   **Ваши наблюдения:**\n","   \n","   ВАЖНО! ⏰\n","   **```тут пишем много текста почему мы так считаем, пойдет даже (Распределение по алкоголю сосредоточено не как нормальное распределение (alcohol), в среднем большинство значений в районе 6 (quality) ) ИЛИ на box plot chlorides видно много выбросов и медиана сосредоточена между 0 и 1``` **\n","   \n","   p.s. если знаете контекст, то можете описать"],"metadata":{"id":"YkkhU8qNQiNu"}},{"cell_type":"markdown","source":["```# тут```"],"metadata":{"id":"IBi2LsQbWvCI"}},{"cell_type":"markdown","source":["## **5. Дополнительное задание** ⏰ (не обязательное, но полезное)\n","\n","### **Описание:**\n","Для тех, кто хочет углубить свои знания и навыки, выполните дополнительное задание ниже.\n","\n","### **Задание:**"],"metadata":{"id":"B1bbdRrWD7iZ"}},{"cell_type":"markdown","source":["**Постройте корреляционную матрицу для всех числовых переменных и визуализируйте её с помощью тепловой карты:**"],"metadata":{"id":"f59wNH9vEBCj"}},{"cell_type":"code","source":["   # Корреляционная матрица\n","   correlation_matrix = df.corr()\n","\n","   # Визуализация тепловой карты\n","   sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n","   plt.title('Корреляционная матрица')\n","   plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"hjoJf7vbEDtY","outputId":"42fe12d8-d998-41eb-d272-f66e1f414ae6","executionInfo":{"status":"error","timestamp":1727474170556,"user_tz":-600,"elapsed":459,"user":{"displayName":"","userId":""}}},"execution_count":28,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"could not convert string to float: 'female'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-fcfd759e30b4>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Корреляционная матрица\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcorrelation_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Визуализация тепловой карты\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrelation_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coolwarm'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  10702\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10703\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 10704\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  10705\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10706\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1887\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1888\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1889\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1890\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1891\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1654\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1656\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1657\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1658\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1713\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1714\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1715\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1716\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1717\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'female'"]}]},{"cell_type":"code","source":["# Если будут ошибки ValueError из-за could not conver string to float\n","df = df.drop('type', axis=1)\n","# найти колонку, из-за которой ничего не получается,\n","# можно найти по object из df.info()"],"metadata":{"id":"6tI82fozG1wk","executionInfo":{"status":"error","timestamp":1727474171019,"user_tz":-600,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"740a6560-05b1-4f72-a461-f15171c19add","colab":{"base_uri":"https://localhost:8080/","height":349}},"execution_count":29,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"['type'] not found in axis\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-eee527658b54>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Если будут ошибки ValueError из-за could not conver string to float\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m# найти колонку, из-за которой ничего не получается,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# можно найти по object из df.info()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5342\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5343\u001b[0m         \"\"\"\n\u001b[0;32m-> 5344\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5345\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5346\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4709\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4710\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4711\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4712\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4713\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4751\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4752\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4753\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4754\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6998\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6999\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7000\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7001\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7002\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['type'] not found in axis\""]}]},{"cell_type":"markdown","source":["2. **Интерпретируйте полученную корреляционную матрицу:**\n","   \n","   - Какие переменные имеют сильную положительную корреляцию?\n","   - Какие переменные имеют сильную отрицательную корреляцию?\n","   - Какие переменные практически некоррелированы?\n","\n","   **Ваши ответы:**\n","   \n","   - **Сильная положительная корреляция:**\n","     - `___`\n","   \n","   - **Сильная отрицательная корреляция:**\n","     - `___`\n","   \n","   - **Практически некоррелированные переменные:**\n","     - `___`"],"metadata":{"id":"Fv0XQxXrEGFb"}},{"cell_type":"markdown","source":["**Определите, какие переменные можно потенциально исключить из дальнейшего анализа из-за высокой корреляции:**\n","   \n","   **Ваши ответы:**\n","   \n","   - `___`"],"metadata":{"id":"9ks1q6K_EInx"}},{"cell_type":"markdown","source":["## **Заключение**\n","\n","В этом задании вы научились загружать и исследовать набор данных, определять типы переменных, проводить статистический разбор и визуализировать распределение данных. Эти навыки являются фундаментальными для дальнейшего анализа данных и построения моделей машинного обучения."],"metadata":{"id":"6hG7m031IMN_"}},{"cell_type":"markdown","source":["## По желанию\n","#### Опишите, что вы поняли из практики, и на чем стоит сфокусироваться, или общие впечатления\n","\n","## https://forms.yandex.ru/u/66e83a1ef47e73e9432f7e4f/"],"metadata":{"id":"rpwjPg2gIPGa"}},{"cell_type":"markdown","source":["\n","\n","## **Рекомендации по выполнению задания:**\n","\n","- **Убедитесь, что все необходимые библиотеки установлены и импортированы.**\n","- **Проверяйте правильность путей к файлам при загрузке данных.**\n","- **Используйте комментарии для объяснения своих действий в коде.**\n","- **Документируйте свои выводы и наблюдения в текстовых ячейках.**\n","- **У вас могут быть ошибки, с которыми вы не сталкивались, в таком случае можете кинуть в чат и кто-нибудь из коллег (включая меня) могут помочь**\n","\n","---"],"metadata":{"id":"sVbfh3JeEUhA"}},{"cell_type":"markdown","source":["# Требования\n","\n","1. Не забываем про ⏰\n","2. Итоговая тетрадка jupyter должна быть на вашем github (нет тетрадки, нет проверки)"],"metadata":{"id":"NP_Sym3cQE3M"}}]}